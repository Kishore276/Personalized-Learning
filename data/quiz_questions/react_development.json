{
  "course_id": 41,
  "course_title": "React Development",
  "language": "javascript",
  "questions": [
    {"id": 1, "level": "basic", "question": "What is React?", "options": ["A JavaScript library for building user interfaces", "A database", "A web server", "A CSS framework"], "correct_answer": "A JavaScript library for building user interfaces", "explanation": "React is a JavaScript library developed by Facebook for building user interfaces, especially for web applications."},
    {"id": 2, "level": "basic", "question": "What is JSX?", "options": ["JavaScript XML syntax", "A database query language", "A CSS preprocessor", "A web framework"], "correct_answer": "JavaScript XML syntax", "explanation": "JSX is a syntax extension for JavaScript that allows you to write HTML-like code in JavaScript."},
    {"id": 3, "level": "basic", "question": "Which method is used to render React elements to the DOM?", "options": ["render()", "display()", "show()", "output()"], "correct_answer": "render()", "explanation": "The render() method is used to render React elements to the DOM."},
    {"id": 4, "level": "basic", "question": "Which hook is used to manage state in a functional component?", "options": ["useState", "useEffect", "useContext", "useReducer"], "correct_answer": "useState", "explanation": "useState is the React hook for managing state in functional components."},
    {"id": 5, "level": "basic", "question": "Which attribute is used to assign a CSS class in JSX?", "options": ["class", "className", "cssClass", "styleClass"], "correct_answer": "className", "explanation": "In JSX, use className instead of class to assign CSS classes."},
    {"id": 6, "level": "basic", "question": "What is state in React?", "options": ["External data", "Component's internal data that can change", "Props from parent", "CSS styles"], "correct_answer": "Component's internal data that can change", "explanation": "State is a component's internal data that can change over time and triggers re-renders."},
    {"id": 7, "level": "basic", "question": "How do you update state in a function component?", "options": ["setState()", "useState()", "updateState()", "changeState()"], "correct_answer": "useState()", "explanation": "In function components, you use the useState hook to manage and update state."},
    {"id": 8, "level": "basic", "question": "What is the useState hook?", "options": ["A function to create state in function components", "A class method", "A lifecycle method", "An event handler"], "correct_answer": "A function to create state in function components", "explanation": "useState is a React hook that allows you to add state to function components."},
    {"id": 9, "level": "basic", "question": "How do you handle events in React?", "options": ["addEventListener", "Event handlers as props", "jQuery events", "DOM events"], "correct_answer": "Event handlers as props", "explanation": "In React, you handle events by passing event handler functions as props to elements."},
    {"id": 10, "level": "basic", "question": "What is the key prop used for?", "options": ["Styling", "Identifying elements in lists", "Event handling", "Component naming"], "correct_answer": "Identifying elements in lists", "explanation": "The key prop helps React identify which items have changed, are added, or are removed in lists."},
    {"id": 11, "level": "basic", "question": "How do you conditionally render content in React?", "options": ["if-else statements", "Ternary operators", "Logical && operator", "All of the above"], "correct_answer": "All of the above", "explanation": "React supports various ways of conditional rendering including ternary operators, logical operators, and if-else statements."},
    {"id": 12, "level": "basic", "question": "What is the virtual DOM?", "options": ["A copy of the real DOM in memory", "A CSS framework", "A database", "A web server"], "correct_answer": "A copy of the real DOM in memory", "explanation": "The virtual DOM is a JavaScript representation of the real DOM kept in memory for performance optimization."},
    {"id": 13, "level": "basic", "question": "How do you create a list in React?", "options": ["Using map() function", "Using for loops", "Using forEach()", "Using while loops"], "correct_answer": "Using map() function", "explanation": "In React, lists are commonly created using the map() function to transform arrays into JSX elements."},
    {"id": 14, "level": "basic", "question": "What is a React fragment?", "options": ["A broken component", "A way to group elements without extra DOM nodes", "A CSS class", "An error state"], "correct_answer": "A way to group elements without extra DOM nodes", "explanation": "React fragments allow you to group multiple elements without adding extra nodes to the DOM."},
    {"id": 15, "level": "basic", "question": "How do you write a React fragment?", "options": ["<React.Fragment>", "<>...</>", "Both ways are valid", "<Fragment>"], "correct_answer": "Both ways are valid", "explanation": "React fragments can be written as <React.Fragment> or using the short syntax <>...</>."},
    {"id": 16, "level": "basic", "question": "What is the purpose of componentDidMount?", "options": ["Component initialization", "Runs after component is mounted to DOM", "Error handling", "State updates"], "correct_answer": "Runs after component is mounted to DOM", "explanation": "componentDidMount is a lifecycle method that runs after the component is mounted to the DOM."},
    {"id": 17, "level": "basic", "question": "How do you import React?", "options": ["import React from 'react'", "require('react')", "include React", "using React"], "correct_answer": "import React from 'react'", "explanation": "React is imported using ES6 import syntax: import React from 'react'."},
    {"id": 18, "level": "basic", "question": "What is the default export of the React package?", "options": ["React object", "Component class", "createElement function", "render function"], "correct_answer": "React object", "explanation": "The default export of the React package is the React object containing all React functionality."},
    {"id": 19, "level": "basic", "question": "How do you pass data from parent to child component in React?", "options": ["props", "state", "context", "data"], "correct_answer": "props", "explanation": "Props are used to pass data from parent to child components in React."},
    {"id": 20, "level": "basic", "question": "What is a React component?", "options": ["A function or class that returns JSX", "A HTML element", "A CSS class", "A JavaScript variable"], "correct_answer": "A function or class that returns JSX", "explanation": "A React component is a function or class that returns JSX to describe what should appear on the screen."},
    {"id": 21, "level": "intermediate", "question": "Which hook is used for side effects in React?", "options": ["useEffect", "useState", "useContext", "useReducer"], "correct_answer": "useEffect", "explanation": "useEffect is used for side effects like data fetching and subscriptions."},
    {"id": 22, "level": "intermediate", "question": "How do you conditionally render elements in React?", "options": ["if statement", "ternary operator", "switch statement", "for loop"], "correct_answer": "ternary operator", "explanation": "Conditional rendering is often done using the ternary operator in JSX."},
    {"id": 23, "level": "intermediate", "question": "Which hook is used to access context in React?", "options": ["useContext", "useState", "useEffect", "useReducer"], "correct_answer": "useContext", "explanation": "useContext allows you to access context values in React."},
    {"id": 24, "level": "intermediate", "question": "How do you update state based on previous state in useState?", "options": ["Pass a function to setState", "Direct assignment", "UseEffect", "UseContext"], "correct_answer": "Pass a function to setState", "explanation": "You can pass a function to setState to update state based on previous state."},
    {"id": 25, "level": "intermediate", "question": "What is the useEffect hook used for?", "options": ["State management", "Side effects and lifecycle events", "Event handling", "Component styling"], "correct_answer": "Side effects and lifecycle events", "explanation": "useEffect is used for performing side effects in function components, replacing lifecycle methods."},
    {"id": 26, "level": "intermediate", "question": "How do you prevent unnecessary re-renders in React?", "options": ["React.memo", "useMemo", "useCallback", "All of the above"], "correct_answer": "All of the above", "explanation": "React.memo, useMemo, and useCallback are all optimization techniques to prevent unnecessary re-renders."},
    {"id": 27, "level": "intermediate", "question": "What is React Context?", "options": ["Global state management", "A way to pass data through component tree", "Event system", "Routing solution"], "correct_answer": "A way to pass data through component tree", "explanation": "React Context provides a way to pass data through the component tree without manually passing props."},
    {"id": 28, "level": "intermediate", "question": "What is the purpose of useReducer?", "options": ["Simple state management", "Complex state logic management", "Effect management", "Context management"], "correct_answer": "Complex state logic management", "explanation": "useReducer is used for managing complex state logic, similar to Redux reducers."},
    {"id": 29, "level": "intermediate", "question": "What is prop drilling?", "options": ["Creating props", "Passing props through multiple component levels", "Updating props", "Validating props"], "correct_answer": "Passing props through multiple component levels", "explanation": "Prop drilling refers to passing props through multiple component levels to reach deeply nested components."},
    {"id": 30, "level": "intermediate", "question": "How do you optimize performance in React?", "options": ["Code splitting", "Lazy loading", "Memoization", "All of the above"], "correct_answer": "All of the above", "explanation": "React performance can be optimized using code splitting, lazy loading, memoization, and other techniques."},
    {"id": 31, "level": "intermediate", "question": "What is React.lazy used for?", "options": ["Lazy state updates", "Code splitting and lazy loading", "Delayed rendering", "Performance monitoring"], "correct_answer": "Code splitting and lazy loading", "explanation": "React.lazy enables code splitting by allowing dynamic imports of components."},
    {"id": 32, "level": "intermediate", "question": "What is Suspense in React?", "options": ["Error handling", "Loading states for lazy components", "Animation system", "State management"], "correct_answer": "Loading states for lazy components", "explanation": "Suspense allows you to handle loading states for lazy-loaded components and data fetching."},
    {"id": 33, "level": "intermediate", "question": "How do you handle forms in React?", "options": ["Controlled components", "Uncontrolled components", "Both approaches", "Form libraries only"], "correct_answer": "Both approaches", "explanation": "React forms can be handled using both controlled components (React manages state) and uncontrolled components (DOM manages state)."},
    {"id": 34, "level": "intermediate", "question": "What is a controlled component?", "options": ["Component with props", "Form element controlled by React state", "Component with state", "Stateless component"], "correct_answer": "Form element controlled by React state", "explanation": "A controlled component is a form element whose value is controlled by React state."},
    {"id": 35, "level": "intermediate", "question": "What is the useRef hook used for?", "options": ["State management", "Accessing DOM elements and persisting values", "Effect management", "Context management"], "correct_answer": "Accessing DOM elements and persisting values", "explanation": "useRef is used to access DOM elements directly and persist values between renders without causing re-renders."},
    {"id": 36, "level": "intermediate", "question": "What is the difference between useCallback and useMemo?", "options": ["No difference", "useCallback memoizes functions, useMemo memoizes values", "useCallback is for effects", "useMemo is for callbacks"], "correct_answer": "useCallback memoizes functions, useMemo memoizes values", "explanation": "useCallback memoizes function references while useMemo memoizes computed values."},
    {"id": 37, "level": "intermediate", "question": "What are React portals?", "options": ["Component gateways", "Rendering children into different DOM node", "Navigation system", "State containers"], "correct_answer": "Rendering children into different DOM node", "explanation": "React portals provide a way to render children into a DOM node outside the parent component's hierarchy."},
    {"id": 38, "level": "intermediate", "question": "What is error boundary in React?", "options": ["Error prevention", "Component that catches JavaScript errors", "Validation system", "Debug tool"], "correct_answer": "Component that catches JavaScript errors", "explanation": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree."},
    {"id": 39, "level": "intermediate", "question": "How do you test React components?", "options": ["Jest", "React Testing Library", "Enzyme", "All of the above"], "correct_answer": "All of the above", "explanation": "React components can be tested using various tools like Jest, React Testing Library, and Enzyme."},
    {"id": 40, "level": "intermediate", "question": "What is a Higher-Order Component (HOC)?", "options": ["A component with high priority", "A function that takes a component and returns a new component", "A class component", "A parent component"], "correct_answer": "A function that takes a component and returns a new component", "explanation": "A Higher-Order Component is a function that takes a component and returns a new component with additional functionality."},
    {"id": 41, "level": "advanced", "question": "What is React.memo used for?", "options": ["Memoize components", "Create hooks", "Manage state", "Handle events"], "correct_answer": "Memoize components", "explanation": "React.memo is used to memoize functional components to prevent unnecessary re-renders."},
    {"id": 42, "level": "advanced", "question": "Which hook is used for performance optimization in React?", "options": ["useMemo", "useEffect", "useState", "useContext"], "correct_answer": "useMemo", "explanation": "useMemo is used to memoize expensive calculations for performance optimization."},
    {"id": 43, "level": "advanced", "question": "How do you handle errors in React components?", "options": ["Error boundaries", "Try-catch", "useEffect", "useState"], "correct_answer": "Error boundaries", "explanation": "Error boundaries are used to catch errors in React components."},
    {"id": 44, "level": "advanced", "question": "Which library is commonly used for routing in React?", "options": ["React Router", "Redux", "Axios", "MobX"], "correct_answer": "React Router", "explanation": "React Router is the standard library for routing in React applications."},
    {"id": 45, "level": "advanced", "question": "What is server-side rendering in React?", "options": ["Rendering on the server", "Rendering on the client", "Rendering in the browser", "Rendering in the database"], "correct_answer": "Rendering on the server", "explanation": "Server-side rendering means rendering React components on the server before sending to the client."},
    {"id": 46, "level": "advanced", "question": "What is the useTransition hook?", "options": ["CSS transitions", "Marking updates as non-urgent", "Component transitions", "Animation hook"], "correct_answer": "Marking updates as non-urgent", "explanation": "useTransition allows you to mark updates as transitions, making them non-urgent and interruptible."},
    {"id": 47, "level": "advanced", "question": "What is the useId hook used for?", "options": ["Component identification", "Generating unique IDs for accessibility", "State identification", "Element tracking"], "correct_answer": "Generating unique IDs for accessibility", "explanation": "useId generates unique IDs that are stable across server and client for accessibility attributes."},
    {"id": 48, "level": "advanced", "question": "What is React's automatic batching?", "options": ["Batch API calls", "Grouping multiple state updates", "Component batching", "Render batching"], "correct_answer": "Grouping multiple state updates", "explanation": "Automatic batching groups multiple state updates into a single re-render for better performance."},
    {"id": 49, "level": "advanced", "question": "What is the flushSync function?", "options": ["Sync state updates", "Force synchronous updates", "Flush effects", "Sync components"], "correct_answer": "Force synchronous updates", "explanation": "flushSync forces React to flush updates synchronously, bypassing automatic batching."},
    {"id": 50, "level": "advanced", "question": "What is React's time slicing?", "options": ["Time measurement", "Breaking work into chunks", "Performance timing", "Scheduling optimization"], "correct_answer": "Breaking work into chunks", "explanation": "Time slicing breaks rendering work into chunks, allowing React to yield control back to the browser."},
    {"id": 51, "level": "advanced", "question": "What is the useInsertionEffect hook?", "options": ["DOM insertion", "CSS-in-JS libraries optimization", "Effect insertion", "Component insertion"], "correct_answer": "CSS-in-JS libraries optimization", "explanation": "useInsertionEffect is designed for CSS-in-JS libraries to inject styles before DOM mutations."},
    {"id": 52, "level": "advanced", "question": "What is React's priority-based scheduling?", "options": ["Task prioritization", "Render priority based on urgency", "Component priority", "State priority"], "correct_answer": "Render priority based on urgency", "explanation": "React's scheduler prioritizes different types of updates based on their urgency to the user."},
    {"id": 53, "level": "advanced", "question": "What is the React Profiler API?", "options": ["Performance monitoring", "Component profiling during rendering", "Code profiling", "Memory profiling"], "correct_answer": "Component profiling during rendering", "explanation": "The Profiler API allows you to measure performance of React component trees programmatically."},
    {"id": 54, "level": "advanced", "question": "What is React's double invoking in development?", "options": ["Bug duplication", "Strict mode behavior for finding side effects", "Double rendering", "Effect duplication"], "correct_answer": "Strict mode behavior for finding side effects", "explanation": "In development, React double-invokes functions to help detect side effects and ensure components are resilient."},
    {"id": 55, "level": "advanced", "question": "What is React's tearing problem?", "options": ["UI tearing", "Inconsistent state during concurrent updates", "Component tearing", "Memory leaks"], "correct_answer": "Inconsistent state during concurrent updates", "explanation": "Tearing occurs when different parts of the UI show inconsistent states during concurrent updates."},
    {"id": 56, "level": "advanced", "question": "What is the useSyncExternalStore hook?", "options": ["External API sync", "Subscribing to external stores safely", "Database sync", "State sync"], "correct_answer": "Subscribing to external stores safely", "explanation": "useSyncExternalStore allows components to safely subscribe to external stores in concurrent React."},
    {"id": 57, "level": "advanced", "question": "What is React's lane-based priority system?", "options": ["Traffic lanes", "Priority lanes for different update types", "Component lanes", "Render lanes"], "correct_answer": "Priority lanes for different update types", "explanation": "React uses a lane-based system to assign priorities to different types of updates for optimal scheduling."},
    {"id": 58, "level": "advanced", "question": "What is selective hydration in React?", "options": ["Partial SSR", "Hydrating components as they become interactive", "Selective rendering", "Component selection"], "correct_answer": "Hydrating components as they become interactive", "explanation": "Selective hydration allows React to prioritize hydrating components that users are interacting with first."},
    {"id": 59, "level": "advanced", "question": "What is React's new JSX transform?", "options": ["JSX compilation", "Runtime JSX without importing React", "JSX optimization", "JSX validation"], "correct_answer": "Runtime JSX without importing React", "explanation": "The new JSX transform allows using JSX without explicitly importing React in every file."},
    {"id": 60, "level": "advanced", "question": "What is React's startTransition API?", "options": ["CSS transitions", "Marking state updates as non-urgent", "Component transitions", "Animation API"], "correct_answer": "Marking state updates as non-urgent", "explanation": "startTransition marks state updates as non-urgent, allowing React to keep the UI responsive during heavy updates."}
  ]
}
