{
  "course_id": 42,
  "course_title": "Node.js Backend Development",
  "language": "javascript",
  "questions": [
    {"id": 1, "level": "basic", "question": "What is Node.js?", "options": ["A JavaScript framework", "A JavaScript runtime environment", "A database", "A web browser"], "correct_answer": "A JavaScript runtime environment", "explanation": "Node.js is a JavaScript runtime environment for server-side programming."},
    {"id": 2, "level": "basic", "question": "Which command initializes a new Node.js project?", "options": ["npm init", "node start", "npm install", "node init"], "correct_answer": "npm init", "explanation": "npm init initializes a new Node.js project."},
    {"id": 3, "level": "basic", "question": "Which file is the entry point for most Node.js apps?", "options": ["index.js", "main.js", "app.js", "server.js"], "correct_answer": "index.js", "explanation": "index.js is commonly used as the entry point."},
    {"id": 4, "level": "basic", "question": "Which module is used to create a server in Node.js?", "options": ["http", "fs", "path", "os"], "correct_answer": "http", "explanation": "The http module is used to create servers in Node.js."},
    {"id": 5, "level": "basic", "question": "Which command installs a package in Node.js?", "options": ["npm install", "node install", "npm add", "node add"], "correct_answer": "npm install", "explanation": "npm install is used to install packages."},
    {"id": 6, "level": "basic", "question": "What is npm?", "options": ["Node Package Manager", "Node Program Manager", "New Package Manager", "Node Project Manager"], "correct_answer": "Node Package Manager", "explanation": "npm stands for Node Package Manager and is used to install and manage Node.js packages."},
    {"id": 7, "level": "basic", "question": "How do you install a package using npm?", "options": ["npm get", "npm install", "npm add", "npm download"], "correct_answer": "npm install", "explanation": "You install packages using the 'npm install' command followed by the package name."},
    {"id": 8, "level": "basic", "question": "What is Express.js?", "options": ["A Node.js web framework", "A database", "A testing tool", "A package manager"], "correct_answer": "A Node.js web framework", "explanation": "Express.js is a minimal and flexible Node.js web application framework."},
    {"id": 9, "level": "basic", "question": "How do you handle routing in Express?", "options": ["app.route()", "app.get(), app.post(), etc.", "router.handle()", "express.route()"], "correct_answer": "app.get(), app.post(), etc.", "explanation": "Express handles routing using methods like app.get(), app.post(), app.put(), app.delete()."},
    {"id": 10, "level": "basic", "question": "What is middleware in Express?", "options": ["Database connector", "Functions that execute during request-response cycle", "Routing system", "Template engine"], "correct_answer": "Functions that execute during request-response cycle", "explanation": "Middleware functions are functions that execute during the request-response cycle in Express."},
    {"id": 11, "level": "basic", "question": "How do you serve static files in Express?", "options": ["express.static()", "app.static()", "serve.static()", "static.serve()"], "correct_answer": "express.static()", "explanation": "You serve static files using express.static() middleware function."},
    {"id": 12, "level": "basic", "question": "What is the purpose of the fs module?", "options": ["File system operations", "Framework setup", "Function storage", "Frontend styling"], "correct_answer": "File system operations", "explanation": "The fs module provides an API for interacting with the file system."},
    {"id": 13, "level": "basic", "question": "How do you read a file in Node.js?", "options": ["fs.readFile()", "file.read()", "read.file()", "fs.read()"], "correct_answer": "fs.readFile()", "explanation": "You read files using fs.readFile() or fs.readFileSync() methods."},
    {"id": 14, "level": "basic", "question": "What is the event loop in Node.js?", "options": ["A programming loop", "Mechanism that handles asynchronous operations", "Event listener", "Loop for events"], "correct_answer": "Mechanism that handles asynchronous operations", "explanation": "The event loop is Node.js's mechanism for handling asynchronous operations."},
    {"id": 15, "level": "basic", "question": "What is a callback function?", "options": ["A function that calls back", "A function passed as argument to another function", "A recursive function", "A built-in function"], "correct_answer": "A function passed as argument to another function", "explanation": "A callback function is a function passed as an argument to another function to be executed later."},
    {"id": 16, "level": "basic", "question": "How do you handle errors in Node.js?", "options": ["try-catch blocks", "Error events", "Callback error parameters", "All of the above"], "correct_answer": "All of the above", "explanation": "Node.js handles errors through try-catch blocks, error events, and error-first callbacks."},
    {"id": 17, "level": "basic", "question": "What is process.env in Node.js?", "options": ["Process environment", "Environment variables", "Processing environment", "Environment setup"], "correct_answer": "Environment variables", "explanation": "process.env is an object containing environment variables available to the Node.js process."},
    {"id": 18, "level": "basic", "question": "How do you start a Node.js application?", "options": ["node app.js", "start app.js", "run app.js", "execute app.js"], "correct_answer": "node app.js", "explanation": "You start a Node.js application using the 'node' command followed by the file name."},
    {"id": 19, "level": "basic", "question": "What is nodemon?", "options": ["Node monitoring tool", "Tool that restarts app on file changes", "Package manager", "Testing framework"], "correct_answer": "Tool that restarts app on file changes", "explanation": "Nodemon is a development tool that automatically restarts your Node.js application when file changes are detected."},
    {"id": 20, "level": "basic", "question": "How do you export a module in Node.js?", "options": ["export", "module.exports", "exports", "Both module.exports and exports"], "correct_answer": "Both module.exports and exports", "explanation": "You can export modules using both module.exports and exports, though module.exports is more commonly used."},
    {"id": 21, "level": "intermediate", "question": "Which module is used to read/write files in Node.js?", "options": ["fs", "http", "path", "os"], "correct_answer": "fs", "explanation": "The fs module is used for file operations."},
    {"id": 22, "level": "intermediate", "question": "Which method is used to handle asynchronous code in Node.js?", "options": ["Callbacks", "Promises", "Async/Await", "All of the above"], "correct_answer": "All of the above", "explanation": "Callbacks, Promises, and Async/Await are all used for async code."},
    {"id": 23, "level": "intermediate", "question": "Which method is used to parse JSON in Node.js?", "options": ["JSON.parse()", "parseJSON()", "toJSON()", "readJSON()"], "correct_answer": "JSON.parse()", "explanation": "JSON.parse() parses JSON strings."},
    {"id": 24, "level": "intermediate", "question": "Which module is used for working with file paths?", "options": ["path", "fs", "http", "os"], "correct_answer": "path", "explanation": "The path module is used for file path operations."},
    {"id": 25, "level": "intermediate", "question": "What is the difference between synchronous and asynchronous operations?", "options": ["No difference", "Sync blocks execution, async doesn't", "Async blocks execution, sync doesn't", "Both block execution"], "correct_answer": "Sync blocks execution, async doesn't", "explanation": "Synchronous operations block execution until complete, while asynchronous operations don't block execution."},
    {"id": 26, "level": "intermediate", "question": "What are Promises in Node.js?", "options": ["Guaranteed results", "Objects representing eventual completion of async operations", "Function promises", "Code promises"], "correct_answer": "Objects representing eventual completion of async operations", "explanation": "Promises are objects that represent the eventual completion or failure of an asynchronous operation."},
    {"id": 27, "level": "intermediate", "question": "What is async/await?", "options": ["Synchronous functions", "Syntactic sugar for Promises", "Callback alternative", "Error handling"], "correct_answer": "Syntactic sugar for Promises", "explanation": "async/await is syntactic sugar for working with Promises, making asynchronous code look more like synchronous code."},
    {"id": 28, "level": "intermediate", "question": "What is the purpose of body-parser middleware?", "options": ["Parse request bodies", "Parse HTML", "Parse CSS", "Parse URLs"], "correct_answer": "Parse request bodies", "explanation": "body-parser middleware is used to parse incoming request bodies in Express applications."},
    {"id": 29, "level": "intermediate", "question": "What is CORS and how do you handle it?", "options": ["Cross-Origin Resource Sharing using cors middleware", "Core Object Resource System", "Cross-Origin Request Security", "Core Resource Sharing"], "correct_answer": "Cross-Origin Resource Sharing using cors middleware", "explanation": "CORS (Cross-Origin Resource Sharing) is handled using cors middleware to allow cross-origin requests."},
    {"id": 30, "level": "intermediate", "question": "What is JWT (JSON Web Token)?", "options": ["Java Web Technology", "JSON Web Token for authentication", "JavaScript Web Tool", "JSON Web Template"], "correct_answer": "JSON Web Token for authentication", "explanation": "JWT is a compact, URL-safe means of representing claims to be transferred between two parties for authentication."},
    {"id": 31, "level": "intermediate", "question": "How do you connect to a MongoDB database in Node.js?", "options": ["Mongoose library", "MongoDB driver", "Database connector", "Both Mongoose and MongoDB driver"], "correct_answer": "Both Mongoose and MongoDB driver", "explanation": "You can connect to MongoDB using either the MongoDB native driver or Mongoose ODM library."},
    {"id": 32, "level": "intermediate", "question": "What is RESTful API?", "options": ["REST architecture for web services", "Database system", "Frontend framework", "Testing methodology"], "correct_answer": "REST architecture for web services", "explanation": "RESTful API follows REST architectural principles for designing web services with standard HTTP methods."},
    {"id": 33, "level": "intermediate", "question": "What are HTTP status codes?", "options": ["Error codes", "Response status indicators", "Request types", "Protocol versions"], "correct_answer": "Response status indicators", "explanation": "HTTP status codes are three-digit numbers that indicate the status of HTTP responses."},
    {"id": 34, "level": "intermediate", "question": "What is input validation and why is it important?", "options": ["UI validation", "Ensuring data integrity and security", "Form validation", "Database validation"], "correct_answer": "Ensuring data integrity and security", "explanation": "Input validation ensures data integrity and security by validating incoming data before processing."},
    {"id": 35, "level": "intermediate", "question": "What is the purpose of environment variables?", "options": ["Store configuration outside code", "Environment setup", "Variable storage", "Code environment"], "correct_answer": "Store configuration outside code", "explanation": "Environment variables store configuration values outside the codebase for security and flexibility."},
    {"id": 36, "level": "intermediate", "question": "What is session management?", "options": ["User session tracking", "Session storage", "Session security", "All of the above"], "correct_answer": "All of the above", "explanation": "Session management involves tracking user sessions, storing session data, and ensuring session security."},
    {"id": 37, "level": "intermediate", "question": "What is the difference between authentication and authorization?", "options": ["No difference", "Authentication verifies identity, authorization verifies permissions", "Both verify identity", "Both verify permissions"], "correct_answer": "Authentication verifies identity, authorization verifies permissions", "explanation": "Authentication verifies who you are, while authorization verifies what you're allowed to do."},
    {"id": 38, "level": "intermediate", "question": "What is bcrypt used for?", "options": ["Data encryption", "Password hashing", "File compression", "Data validation"], "correct_answer": "Password hashing", "explanation": "bcrypt is a password hashing function designed to securely hash passwords with salt."},
    {"id": 39, "level": "intermediate", "question": "What is the purpose of helmet.js?", "options": ["Security headers", "Helmet protection", "HTTP security", "Security middleware"], "correct_answer": "Security headers", "explanation": "Helmet.js helps secure Express apps by setting various HTTP security headers."},
    {"id": 40, "level": "intermediate", "question": "What is the purpose of testing in Node.js applications?", "options": ["Code verification", "Bug prevention", "Quality assurance", "All of the above"], "correct_answer": "All of the above", "explanation": "Testing ensures code quality, prevents bugs, and verifies that applications work as expected."},
    {"id": 41, "level": "advanced", "question": "Which Node.js module is used for cryptography?", "options": ["crypto", "fs", "http", "os"], "correct_answer": "crypto", "explanation": "The crypto module is used for cryptography in Node.js."},
    {"id": 42, "level": "advanced", "question": "Which package is used for authentication in Node.js?", "options": ["Passport", "Express", "JWT", "MongoDB"], "correct_answer": "Passport", "explanation": "Passport is a popular authentication middleware for Node.js."},
    {"id": 43, "level": "advanced", "question": "Which method is used to handle errors in async/await?", "options": ["try-catch", "catch-then", "error-handler", "promise-catch"], "correct_answer": "try-catch", "explanation": "try-catch is used to handle errors in async/await."},
    {"id": 44, "level": "advanced", "question": "Which database is commonly used with Node.js?", "options": ["MongoDB", "MySQL", "PostgreSQL", "All of the above"], "correct_answer": "All of the above", "explanation": "Node.js can be used with MongoDB, MySQL, PostgreSQL, and more."},
    {"id": 45, "level": "advanced", "question": "Which tool is used for real-time communication in Node.js?", "options": ["Socket.io", "Express", "React", "MongoDB"], "correct_answer": "Socket.io", "explanation": "Socket.io is used for real-time communication in Node.js."},
    {"id": 46, "level": "advanced", "question": "What is clustering in Node.js?", "options": ["Data clustering", "Creating multiple worker processes", "Server clustering", "Database clustering"], "correct_answer": "Creating multiple worker processes", "explanation": "Clustering in Node.js allows you to create multiple worker processes to take advantage of multi-core systems."},
    {"id": 47, "level": "advanced", "question": "What is the Worker Threads module?", "options": ["Threading library", "CPU-intensive tasks in separate threads", "Worker management", "Thread pooling"], "correct_answer": "CPU-intensive tasks in separate threads", "explanation": "Worker Threads allow you to run CPU-intensive JavaScript operations in separate threads."},
    {"id": 48, "level": "advanced", "question": "What is streaming in Node.js?", "options": ["Video streaming", "Processing data piece by piece", "Live streaming", "Data streaming"], "correct_answer": "Processing data piece by piece", "explanation": "Streaming allows you to process data piece by piece without loading the entire dataset into memory."},
    {"id": 49, "level": "advanced", "question": "What are the different types of streams?", "options": ["Readable, Writable, Duplex, Transform", "Input, Output", "Data, File", "Read, Write"], "correct_answer": "Readable, Writable, Duplex, Transform", "explanation": "Node.js has four types of streams: Readable, Writable, Duplex, and Transform."},
    {"id": 50, "level": "advanced", "question": "What is backpressure in streams?", "options": ["Pressure relief", "When consumer can't keep up with producer", "Reverse pressure", "Data pressure"], "correct_answer": "When consumer can't keep up with producer", "explanation": "Backpressure occurs when the consumer of a stream cannot keep up with the producer."},
    {"id": 51, "level": "advanced", "question": "What is the purpose of pm2?", "options": ["Package manager", "Process manager for Node.js applications", "Performance monitor", "Project manager"], "correct_answer": "Process manager for Node.js applications", "explanation": "PM2 is a production process manager for Node.js applications with load balancing and monitoring."},
    {"id": 52, "level": "advanced", "question": "What is microservices architecture?", "options": ["Small services", "Architecture with small, independent services", "Micro applications", "Service components"], "correct_answer": "Architecture with small, independent services", "explanation": "Microservices architecture structures an application as a collection of small, independent services."},
    {"id": 53, "level": "advanced", "question": "What is API Gateway?", "options": ["Gateway API", "Single entry point for microservices", "API management", "Service gateway"], "correct_answer": "Single entry point for microservices", "explanation": "API Gateway acts as a single entry point for multiple microservices, handling routing and cross-cutting concerns."},
    {"id": 54, "level": "advanced", "question": "What is caching and why is it important?", "options": ["Cache storage", "Storing frequently accessed data for performance", "Data hiding", "Memory management"], "correct_answer": "Storing frequently accessed data for performance", "explanation": "Caching stores frequently accessed data in fast storage to improve application performance."},
    {"id": 55, "level": "advanced", "question": "What is Redis and how is it used?", "options": ["Database", "In-memory data store for caching", "File system", "Web server"], "correct_answer": "In-memory data store for caching", "explanation": "Redis is an in-memory data store commonly used for caching, session storage, and real-time applications."},
    {"id": 56, "level": "advanced", "question": "What is load balancing?", "options": ["Balance loading", "Distributing requests across multiple servers", "Load management", "Server balancing"], "correct_answer": "Distributing requests across multiple servers", "explanation": "Load balancing distributes incoming requests across multiple servers to improve performance and reliability."},
    {"id": 57, "level": "advanced", "question": "What is containerization with Docker?", "options": ["Container storage", "Packaging applications with dependencies", "Data containers", "Application containers"], "correct_answer": "Packaging applications with dependencies", "explanation": "Containerization packages applications with their dependencies into portable containers."},
    {"id": 58, "level": "advanced", "question": "What is CI/CD?", "options": ["Code Integration/Continuous Deployment", "Continuous Integration/Continuous Deployment", "Code Improvement/Code Deployment", "Continuous Improvement/Continuous Development"], "correct_answer": "Continuous Integration/Continuous Deployment", "explanation": "CI/CD stands for Continuous Integration/Continuous Deployment, automating the software delivery process."},
    {"id": 59, "level": "advanced", "question": "What is GraphQL?", "options": ["Graph database", "Query language for APIs", "Graph library", "Graphic Query Language"], "correct_answer": "Query language for APIs", "explanation": "GraphQL is a query language and runtime for APIs that allows clients to request specific data."},
    {"id": 60, "level": "advanced", "question": "What is serverless architecture?", "options": ["No servers", "Cloud functions without server management", "Server elimination", "Virtual servers"], "correct_answer": "Cloud functions without server management", "explanation": "Serverless architecture allows running code without managing servers, using cloud functions that scale automatically."}
  ]
}
